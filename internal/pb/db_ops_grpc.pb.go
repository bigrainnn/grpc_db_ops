// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DbOpsServiceClient is the client API for DbOpsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DbOpsServiceClient interface {
	Insert(ctx context.Context, in *InsertReq, opts ...grpc.CallOption) (*Res, error)
	Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*Res, error)
	Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Res, error)
	GetRecord(ctx context.Context, in *GetRecordReq, opts ...grpc.CallOption) (*GetRecordRes, error)
}

type dbOpsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDbOpsServiceClient(cc grpc.ClientConnInterface) DbOpsServiceClient {
	return &dbOpsServiceClient{cc}
}

func (c *dbOpsServiceClient) Insert(ctx context.Context, in *InsertReq, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/db_common_ops.DbOpsService/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbOpsServiceClient) Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/db_common_ops.DbOpsService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbOpsServiceClient) Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/db_common_ops.DbOpsService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbOpsServiceClient) GetRecord(ctx context.Context, in *GetRecordReq, opts ...grpc.CallOption) (*GetRecordRes, error) {
	out := new(GetRecordRes)
	err := c.cc.Invoke(ctx, "/db_common_ops.DbOpsService/GetRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DbOpsServiceServer is the server API for DbOpsService service.
// All implementations must embed UnimplementedDbOpsServiceServer
// for forward compatibility
type DbOpsServiceServer interface {
	Insert(context.Context, *InsertReq) (*Res, error)
	Update(context.Context, *UpdateReq) (*Res, error)
	Delete(context.Context, *DeleteReq) (*Res, error)
	GetRecord(context.Context, *GetRecordReq) (*GetRecordRes, error)
	mustEmbedUnimplementedDbOpsServiceServer()
}

// UnimplementedDbOpsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDbOpsServiceServer struct {
}

func (UnimplementedDbOpsServiceServer) Insert(context.Context, *InsertReq) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedDbOpsServiceServer) Update(context.Context, *UpdateReq) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDbOpsServiceServer) Delete(context.Context, *DeleteReq) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDbOpsServiceServer) GetRecord(context.Context, *GetRecordReq) (*GetRecordRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecord not implemented")
}
func (UnimplementedDbOpsServiceServer) mustEmbedUnimplementedDbOpsServiceServer() {}

// UnsafeDbOpsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DbOpsServiceServer will
// result in compilation errors.
type UnsafeDbOpsServiceServer interface {
	mustEmbedUnimplementedDbOpsServiceServer()
}

func RegisterDbOpsServiceServer(s grpc.ServiceRegistrar, srv DbOpsServiceServer) {
	s.RegisterService(&DbOpsService_ServiceDesc, srv)
}

func _DbOpsService_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbOpsServiceServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db_common_ops.DbOpsService/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbOpsServiceServer).Insert(ctx, req.(*InsertReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbOpsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbOpsServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db_common_ops.DbOpsService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbOpsServiceServer).Update(ctx, req.(*UpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbOpsService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbOpsServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db_common_ops.DbOpsService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbOpsServiceServer).Delete(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbOpsService_GetRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbOpsServiceServer).GetRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db_common_ops.DbOpsService/GetRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbOpsServiceServer).GetRecord(ctx, req.(*GetRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DbOpsService_ServiceDesc is the grpc.ServiceDesc for DbOpsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DbOpsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "db_common_ops.DbOpsService",
	HandlerType: (*DbOpsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Insert",
			Handler:    _DbOpsService_Insert_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _DbOpsService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DbOpsService_Delete_Handler,
		},
		{
			MethodName: "GetRecord",
			Handler:    _DbOpsService_GetRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db_ops.proto",
}
